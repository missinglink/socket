import { test } from '../test/index.js'
import * as biconv from './bigintconv.js'
import * as bits from './bits.js'

test('trailingZeros8', (t) => {
  let assert = (byte, expected) => t.equal(bits.trailingZeros8(byte), expected)
  assert(0b00000000, 8)
  assert(0b10000000, 7)
  assert(0b01000000, 6)
  assert(0b00100000, 5)
  assert(0b00010000, 4)
  assert(0b00001000, 3)
  assert(0b00000100, 2)
  assert(0b00000010, 1)
  assert(0b00000001, 0)
})

test('trailingZeros64', (t) => {
  let assert = (int, expected) => t.equal(bits.trailingZerosN(biconv.toUint8Array(int), 8), expected)
  assert(0b0000000000000000000000000000000000000000000000000000000000000001n,  0)
  assert(0b0000000000000000000000000000000000000000000000000000000000000010n,  1)
  assert(0b0000000000000000000000000000000000000000000000000000000000000100n,  2)
  assert(0b0000000000000000000000000000000000000000000000000000000000001000n,  3)
  assert(0b0000000000000000000000000000000000000000000000000000000000010000n,  4)
  assert(0b0000000000000000000000000000000000000000000000000000000000100000n,  5)
  assert(0b0000000000000000000000000000000000000000000000000000000001000000n,  6)
  assert(0b0000000000000000000000000000000000000000000000000000000010000000n,  7)
  assert(0b0000000000000000000000000000000000000000000000000000000100000000n,  8)
  assert(0b0000000000000000000000000000000000000000000000000000000000000000n, 64)
  assert(0b1000000000000000000000000000000000000000000000000000000000000000n, 63)
  assert(0b0100000000000000000000000000000000000000000000000000000000000000n, 62)
  assert(0b0010000000000000000000000000000000000000000000000000000000000000n, 61)
  assert(0b0001000000000000000000000000000000000000000000000000000000000000n, 60)
  assert(0b0000100000000000000000000000000000000000000000000000000000000000n, 59)
  assert(0b0000010000000000000000000000000000000000000000000000000000000000n, 58)
  assert(0b0000001000000000000000000000000000000000000000000000000000000000n, 57)
  assert(0b0000000100000000000000000000000000000000000000000000000000000000n, 56)
})

test('setTrailing8', (t) => {
  let assert = ([byte, n, v], expected) => t.equal(bits.setTrailing8(byte, n, v), expected)
  assert([0b00000000, 0, 1], 0b00000000)
  assert([0b00000000, 1, 1], 0b00000001)
  assert([0b00000000, 2, 1], 0b00000011)
  assert([0b00000000, 3, 1], 0b00000111)
  assert([0b00000000, 4, 1], 0b00001111)
  assert([0b00000000, 5, 1], 0b00011111)
  assert([0b00000000, 6, 1], 0b00111111)
  assert([0b00000000, 7, 1], 0b01111111)
  assert([0b00000000, 8, 1], 0b11111111)
  assert([0b11111111, 0, 0], 0b11111111)
  assert([0b11111111, 1, 0], 0b11111110)
  assert([0b11111111, 2, 0], 0b11111100)
  assert([0b11111111, 3, 0], 0b11111000)
  assert([0b11111111, 4, 0], 0b11110000)
  assert([0b11111111, 5, 0], 0b11100000)
  assert([0b11111111, 6, 0], 0b11000000)
  assert([0b11111111, 7, 0], 0b10000000)
  assert([0b11111111, 8, 0], 0b00000000)
})

test('setTrailing64', (t) => {
  let assert = ([int, n, v], expected) => {
    let arr = biconv.toUint8Array(int); bits.setTrailingN(arr, 8, n, v)
    t.ok(biconv.fromUint8Array(arr) == expected)
  }
  assert([0b00000000000000000000000000000000n,  0, 1], 0b00000000000000000000000000000000n)
  assert([0b00000000000000000000000000000000n,  1, 1], 0b00000000000000000000000000000001n)
  assert([0b00000000000000000000000000000000n,  9, 1], 0b00000000000000000000000111111111n)
  assert([0b00000000000000000000000000000000n, 17, 1], 0b00000000000000011111111111111111n)
  assert([0b00000000000000000000000000000000n, 25, 1], 0b00000001111111111111111111111111n)
  assert([0b00000000000000000000000000000000n, 32, 1], 0b11111111111111111111111111111111n)
  assert([0b11111111111111111111111111111111n,  0, 0], 0b11111111111111111111111111111111n)
  assert([0b11111111111111111111111111111111n,  1, 0], 0b11111111111111111111111111111110n)
  assert([0b11111111111111111111111111111111n,  9, 0], 0b11111111111111111111111000000000n)
  assert([0b11111111111111111111111111111111n, 17, 0], 0b11111111111111100000000000000000n)
  assert([0b11111111111111111111111111111111n, 25, 0], 0b11111110000000000000000000000000n)
  assert([0b11111111111111111111111111111111n, 32, 0], 0b00000000000000000000000000000000n)
})

test('flip8', (t) => {
  let assert = ([byte, n], expected) => t.equal(bits.flip8(byte, n), expected)
  assert([0b00000000, 7], 0b10000000)
  assert([0b00000000, 6], 0b01000000)
  assert([0b00000000, 5], 0b00100000)
  assert([0b00000000, 4], 0b00010000)
  assert([0b00000000, 3], 0b00001000)
  assert([0b00000000, 2], 0b00000100)
  assert([0b00000000, 1], 0b00000010)
  assert([0b00000000, 0], 0b00000001)
})

test('flip64', (t) => {
  let assert = ([int, n], expected) => {
    let arr = biconv.toUint8Array(int); bits.flipN(arr, 8, n)
    t.ok(biconv.fromUint8Array(arr) === expected)
  }
  assert([0b00000000000000000000000000000000n,  0], 0b00000000000000000000000000000001n)
  assert([0b00000000000000000000000000000000n,  1], 0b00000000000000000000000000000010n)
  assert([0b00000000000000000000000000000000n,  9], 0b00000000000000000000001000000000n)
  assert([0b00000000000000000000000000000000n, 17], 0b00000000000000100000000000000000n)
  assert([0b00000000000000000000000000000000n, 25], 0b00000010000000000000000000000000n)
  assert([0b00000000000000000000000000000000n, 31], 0b10000000000000000000000000000000n)
  assert([0b11111111111111111111111111111111n,  0], 0b11111111111111111111111111111110n)
  assert([0b11111111111111111111111111111111n,  1], 0b11111111111111111111111111111101n)
  assert([0b11111111111111111111111111111111n,  9], 0b11111111111111111111110111111111n)
  assert([0b11111111111111111111111111111111n, 17], 0b11111111111111011111111111111111n)
  assert([0b11111111111111111111111111111111n, 25], 0b11111101111111111111111111111111n)
  assert([0b11111111111111111111111111111111n, 31], 0b01111111111111111111111111111111n)
})

test('set8', (t) => {
  let assert = ([byte, n, v], expected) => t.equal(bits.set8(byte, n, v), expected)
  assert([0b00000000, 7, 1], 0b10000000)
  assert([0b00000000, 6, 1], 0b01000000)
  assert([0b00000000, 5, 1], 0b00100000)
  assert([0b00000000, 4, 1], 0b00010000)
  assert([0b00000000, 3, 1], 0b00001000)
  assert([0b00000000, 2, 1], 0b00000100)
  assert([0b00000000, 1, 1], 0b00000010)
  assert([0b00000000, 0, 1], 0b00000001)
  assert([0b11111111, 7, 0], 0b01111111)
  assert([0b11111111, 6, 0], 0b10111111)
  assert([0b11111111, 5, 0], 0b11011111)
  assert([0b11111111, 4, 0], 0b11101111)
  assert([0b11111111, 3, 0], 0b11110111)
  assert([0b11111111, 2, 0], 0b11111011)
  assert([0b11111111, 1, 0], 0b11111101)
  assert([0b11111111, 0, 0], 0b11111110)
})

test('set64', (t) => {
  let assert = ([int, n, v], expected) => {
    let arr = biconv.toUint8Array(int); bits.setN(arr, 8, n, v)
    t.ok(biconv.fromUint8Array(arr) === expected)
  }
  assert([0b00000000000000000000000000000000n,  0, 1], 0b00000000000000000000000000000001n)
  assert([0b00000000000000000000000000000000n,  1, 1], 0b00000000000000000000000000000010n)
  assert([0b00000000000000000000000000000000n,  9, 1], 0b00000000000000000000001000000000n)
  assert([0b00000000000000000000000000000000n, 17, 1], 0b00000000000000100000000000000000n)
  assert([0b00000000000000000000000000000000n, 25, 1], 0b00000010000000000000000000000000n)
  assert([0b00000000000000000000000000000000n, 31, 1], 0b10000000000000000000000000000000n)
  assert([0b11111111111111111111111111111111n,  0, 0], 0b11111111111111111111111111111110n)
  assert([0b11111111111111111111111111111111n,  1, 0], 0b11111111111111111111111111111101n)
  assert([0b11111111111111111111111111111111n,  9, 0], 0b11111111111111111111110111111111n)
  assert([0b11111111111111111111111111111111n, 17, 0], 0b11111111111111011111111111111111n)
  assert([0b11111111111111111111111111111111n, 25, 0], 0b11111101111111111111111111111111n)
  assert([0b11111111111111111111111111111111n, 31, 0], 0b01111111111111111111111111111111n)
})