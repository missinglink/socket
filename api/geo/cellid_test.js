import { test } from '../test/index.js'
import CellID from './cellid.js'

test('face', (t) => {
  t.equal(new CellID(0b0001111111111111111111111111111111111111111111111111111111111111n).face(), 0)
  t.equal(new CellID(0b0011111111111111111111111111111111111111111111111111111111111111n).face(), 1)
  t.equal(new CellID(0b0101111111111111111111111111111111111111111111111111111111111111n).face(), 2)
  t.equal(new CellID(0b0111111111111111111111111111111111111111111111111111111111111111n).face(), 3)
  t.equal(new CellID(0b1001111111111111111111111111111111111111111111111111111111111111n).face(), 4)
  t.equal(new CellID(0b1011111111111111111111111111111111111111111111111111111111111111n).face(), 5)
})

test('level', (t) => {
  t.equal(new CellID(0b0000000000000000000000000000000000000000000000000000000000000001n).level(), 30)
  t.equal(new CellID(0b0000000000000000000000000000000000000000000000000000000000000100n).level(), 29)
  t.equal(new CellID(0b0000000000000000000000000000000001000000000000000000000000000000n).level(), 15)
  t.equal(new CellID(0b0000000000000000000000000000000100000000000000000000000000000000n).level(), 14)
  t.equal(new CellID(0b0000010000000000000000000000000000000000000000000000000000000000n).level(), 1)
  t.equal(new CellID(0b0001000000000000000000000000000000000000000000000000000000000000n).level(), 0)
  t.equal(new CellID(0b0000000000000000000000000000000000000000000000000000000000000010n).level(), Infinity)
  t.equal(new CellID(0b0000000000000000000000000000000000000000000000000000000000001000n).level(), Infinity)
})

test('parent', (t) => {
  const l = new CellID(0b0011110000111100001111000011110000111100001111000011110000111101n)
  t.deepEqual(l.parent(30), new CellID(0b0011110000111100001111000011110000111100001111000011110000111101n))
  t.deepEqual(l.parent(29), new CellID(0b0011110000111100001111000011110000111100001111000011110000111100n))
  t.deepEqual(l.parent(15), new CellID(0b0011110000111100001111000011110001000000000000000000000000000000n))
  t.deepEqual(l.parent(14), new CellID(0b0011110000111100001111000011110100000000000000000000000000000000n))
  t.deepEqual(l.parent(1), new CellID(0b0011110000000000000000000000000000000000000000000000000000000000n))
  t.deepEqual(l.parent(0), new CellID(0b0011000000000000000000000000000000000000000000000000000000000000n))
})

test('range', (t) => {
  const c = new CellID(0b0011110000111100001111000011110001000000000000000000000000000000n)
  t.deepEqual(c.rangeMin(), new CellID(0b0011110000111100001111000011110000000000000000000000000000000001n))
  t.deepEqual(c.rangeMax(), new CellID(0b0011110000111100001111000011110001111111111111111111111111111111n))
})

test('contains', (t) => {
  const c1 = new CellID(0b0011110000111100001111000011110000111100001111000011110000111101n)
  t.ok(!c1.contains(c1.parent(10)))
  t.ok(c1.parent(10).contains(c1))

  const c2 = new CellID(0b1011111111111111111111111111111111111111111111111111111111111111n)
  t.ok(!c2.contains(c2.parent(10)))
  t.ok(c2.parent(10).contains(c2))

  t.ok(!c1.contains(c2))
  t.ok(!c2.contains(c1))
})

test('intersects', (t) => {
  const c1 = new CellID(0b0011110000111100001111000011110000111100001111000011110000111101n)
  t.ok(c1.intersects(c1.parent(10)))
  t.ok(c1.parent(10).intersects(c1))

  const c2 = new CellID(0b1011111111111111111111111111111111111111111111111111111111111111n)
  t.ok(c2.intersects(c2.parent(10)))
  t.ok(c2.parent(10).intersects(c2))

  t.ok(!c1.intersects(c2))
  t.ok(!c2.intersects(c1))
})

test('valid', (t) => {
  t.ok(new CellID(0b0000000000000000000000000000000000000000000000000000000000000001n).valid())
  t.ok(!new CellID(0b1110000000000000000000000000000000000000000000000000000000000001n).valid(), 'face')
  t.ok(!new CellID(0b0000000000000000000000000000000000000000000000000000000000000010n).valid(), 'level')
})

test('random', (t) => {
  for (let level = CellID.maxLevel; level >= 0; level--) {
    const c = CellID.random(level)
    t.ok(c.valid())
    t.equal(c.level(), level)
  }
})
